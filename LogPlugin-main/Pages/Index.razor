@page "/"
@using LoggerPlugin.Data
@using LoggerPlugin.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _context

<h1>Log Viewer</h1>

<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label for="logLevel">Filter by log level:</label>
            <select @bind="_selectedLogLevel" @oninput="OnSelectedLogLevelChanged" id="logLevel">
                <option value="">All</option>
                @foreach (var level in _logLevels)
                {
                    <option value="@level">@level</option>
                }
            </select>
        </div>
    </div>

    <div class="col-md-6">
        <div class="form-group">
            <label for="user">Filter by user:</label>
            <input type="text" @bind="_selectedUser" @oninput="OnSelectedUserChanged" id="user">
        </div>
    </div>
</div>


@if (_logEvents == null)
{
    <p><em>Loading...</em></p>
}
else if (_logEvents.Count == 0)
{
    <p><em>No logs found.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Timestamp</th>
                <th>Level</th>
                <th>User Information</th>
                <th>System Information</th>
                <th>Process Information</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var logEvent in _logEvents)
        {
            <tr>
                <td>@logEvent.Timestamp</td>
                <td>@logEvent.Level</td>
                <td>@logEvent.UserInformation</td>
                <td>@logEvent.SystemInformation</td>
                <td>@logEvent.ProcessInformation</td>
                <td>@logEvent.Message</td>
            </tr>
        }
        </tbody>
    </table>

    <div class="d-flex justify-content-center">
        <button class="btn btn-primary mx-1" @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
        <div>Page @_currentPage of @_totalPages</div>
        <button class="btn btn-primary mx-1" @onclick="NextPage" disabled="@(_currentPage == _totalPages)">Next</button>
    </div>
}

@code {
    private List<LogEvent>? _logEvents;
    private int _currentPage = 1;
    private int _pageSize = 10;
    private int _totalPages;
    private string? _selectedLogLevel;
    private string? _selectedUser;

    private string[] _logLevels = new[] { "Information", "Debug", "Warning", "Error", "Critical" , "None", "Trace" };

        private async Task OnSelectedLogLevelChanged(ChangeEventArgs e)
        {
            _currentPage = 1;
            if(e.Value == null){
                return;
            }
            _selectedLogLevel = e.Value.ToString();
            await LoadData();
        }

        private async Task OnSelectedUserChanged(ChangeEventArgs e)
        {
            _currentPage = 1;
            if(e.Value == null){
                return;
            }
            _selectedUser = e.Value.ToString();
            await LoadData();
        }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

   private async Task LoadData()
    {
        try
        {
            if(_context.LogEvents ==null){
                return;
            }

            var logsQuery = _context.LogEvents.AsQueryable();
            if (!string.IsNullOrEmpty(_selectedLogLevel) && _selectedLogLevel != "All")
            {
                logsQuery = logsQuery.Where(x => x.Level == _selectedLogLevel);
            }

            if(!string.IsNullOrEmpty(_selectedUser)){
                logsQuery = logsQuery.Where(x => x.UserInformation != null && x.UserInformation.Contains(_selectedUser));

            }

            _logEvents = await logsQuery
                .OrderByDescending(x => x.Timestamp)
                .Skip((_currentPage - 1) * _pageSize)
                .Take(_pageSize)
                .ToListAsync();

            int _totalEventsCount = logsQuery.Count();

            _totalPages = (_totalEventsCount + _pageSize - 1) / _pageSize;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex.ToString());
            _logEvents = new List<LogEvent>();
        }
    }

    private async Task PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadData();
        }
    }

}
